import serial
import sqlite3
import matplotlib
import matplotlib.pyplot as plt
import math
import os


# Connect to the database or create it if it doesn't exist
conn = sqlite3.connect('ATC_DB.db')
c = conn.cursor()
ser = serial.Serial('/dev/ttyACM0', 9600)
valuefromarduino = ser.readline().decode('utf-8').strip()
totaldatapoints = 0

# Create the PMOS or NMOS table if it doesn't exist
if valuefromarduino == "1":
    table_name = 'PMOS'
else:
    table_name = 'NMOS'

c.execute(f'''
    CREATE TABLE IF NOT EXISTS {table_name} (
        ID INTEGER PRIMARY KEY,
        GVoltage REAL,
        SVoltage REAL,
        DVoltage REAL,
        VGS REAL,
        Current REAL
    )
''')
vgs = []
current = []
#ID = []

try:
    while True:
        data = ser.readline().decode('utf-8').strip()

        # Debugging line to print raw Arduino data
        print(f"Raw Arduino Data: {data}")

        # Split the data based on spaces
        values = data.split()

        # Extract numerical values
        gvoltage_value = float(values[0].split(":")[1])
        svoltage_value = float(values[1].split(":")[1])
        dvoltage_value = float(values[2].split(":")[1])
        vgs_value = float(values[3].split(":")[1])
        current_value = float(values[4].split(":")[1])

        # Store data in the database
        c.execute(f"INSERT INTO {table_name} (GVoltage, SVoltage, DVoltage, VGS, Current) VALUES (?, ?, ?, ?, ?)",
                  (gvoltage_value, svoltage_value, dvoltage_value, vgs_value, current_value))
        conn.commit()

        # Append values for plotting
        vgs.append(vgs_value)
        current.append(current_value)
        ID = [math.sqrt(value) for value in current if value >= 0.005]
        #generate the VGS vs Current graph once all datapoints have been collected
        totaldatapoints += 1
        if totaldatapoints == 25:
                plt.figure()
                plt.plot(vgs, current, 'o-')
                plt.xlabel('VGS')
                plt.ylabel('CURRENT')
                plt.title('VGS vs. Current')
                plt.grid(True)
                plt.show()
                
        #generate the VGS vs sqrt(ID):
                #vgs_filtered = vgs[:len(ID)]
                plt.figure()
                plt.plot(vgs[len(vgs)-len(ID):len(vgs)], ID, 'o-')
                plt.xlabel('VGS')
                plt.ylabel('')
                plt.title('VGS vs sqrt(ID)')
                plt.grid(True)
                plt.show()
                break
                
except KeyboardInterrupt:
    print("Data collection stopped by user")

finally:
    # Close the serial port and database connection
    ser.close()
    conn.close()


